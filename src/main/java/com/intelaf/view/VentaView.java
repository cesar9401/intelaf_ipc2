
package com.intelaf.view;

import com.intelaf.controller.MainControl;
import com.intelaf.model.*;
import java.awt.Image;
import java.util.*;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author cesar31
 */
public class VentaView extends javax.swing.JPanel {

    private MainControl control;
    private Tienda tienda;
    private List<Producto> productos;
    private List<Producto> productosCliente;
    private String[][] lista;
    private String[][] listaCliente;
    private double total;
    
    /**
     * Creates new form VentaView
     */
    public VentaView() {
        initComponents();
        setComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productosTable = new javax.swing.JTable();
        descriptionLabel = new javax.swing.JLabel();
        cantidadText = new javax.swing.JTextField();
        cantidadLabel = new javax.swing.JLabel();
        carritoButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        productosClienteTable = new javax.swing.JTable();
        productosTiendaLabel = new javax.swing.JLabel();
        productosClienteLabel = new javax.swing.JLabel();
        eliminarButton = new javax.swing.JButton();
        editarButton = new javax.swing.JButton();
        procesarButton = new javax.swing.JButton();
        cancelarButton = new javax.swing.JButton();
        totalLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(248, 147, 31));
        setMinimumSize(new java.awt.Dimension(800, 700));

        productosTable.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        productosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        productosTable.setEditingColumn(0);
        productosTable.setEditingRow(0);
        productosTable.setMinimumSize(new java.awt.Dimension(700, 250));
        productosTable.setPreferredSize(new java.awt.Dimension(700, 250));
        productosTable.setRowHeight(36);
        productosTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        productosTable.setSelectionForeground(new java.awt.Color(248, 147, 31));
        productosTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        productosTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        productosTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productosTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(productosTable);
        productosTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        descriptionLabel.setBackground(new java.awt.Color(248, 147, 31));
        descriptionLabel.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        descriptionLabel.setForeground(new java.awt.Color(0, 0, 0));
        descriptionLabel.setText("Descripción:");
        descriptionLabel.setMinimumSize(new java.awt.Dimension(700, 60));
        descriptionLabel.setPreferredSize(new java.awt.Dimension(700, 80));

        cantidadText.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        cantidadText.setForeground(new java.awt.Color(0, 0, 0));
        cantidadText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cantidadText.setText("Número");
        cantidadText.setToolTipText("");
        cantidadText.setMinimumSize(new java.awt.Dimension(90, 36));
        cantidadText.setPreferredSize(new java.awt.Dimension(90, 36));

        cantidadLabel.setBackground(new java.awt.Color(248, 147, 31));
        cantidadLabel.setFont(new java.awt.Font("sansserif", 0, 20)); // NOI18N
        cantidadLabel.setForeground(new java.awt.Color(255, 255, 255));
        cantidadLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cantidadLabel.setText("Cantidad");
        cantidadLabel.setMaximumSize(new java.awt.Dimension(90, 36));
        cantidadLabel.setMinimumSize(new java.awt.Dimension(90, 36));
        cantidadLabel.setPreferredSize(new java.awt.Dimension(90, 36));

        carritoButton.setBackground(new java.awt.Color(248, 147, 31));
        carritoButton.setForeground(new java.awt.Color(255, 255, 255));
        carritoButton.setMaximumSize(new java.awt.Dimension(50, 50));
        carritoButton.setMinimumSize(new java.awt.Dimension(50, 50));
        carritoButton.setPreferredSize(new java.awt.Dimension(50, 50));
        carritoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carritoButtonActionPerformed(evt);
            }
        });

        productosClienteTable.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        productosClienteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Codigo", "Nombre", "Fabricante", "Cantidad", "Precio", "SubTotal"
            }
        ));
        productosClienteTable.setEditingColumn(0);
        productosClienteTable.setEditingRow(0);
        productosClienteTable.setMinimumSize(new java.awt.Dimension(700, 200));
        productosClienteTable.setPreferredSize(new java.awt.Dimension(700, 200));
        productosClienteTable.setRowHeight(36);
        productosClienteTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        productosClienteTable.setSelectionForeground(new java.awt.Color(248, 147, 31));
        productosClienteTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        productosClienteTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(productosClienteTable);

        productosTiendaLabel.setBackground(new java.awt.Color(248, 147, 31));
        productosTiendaLabel.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        productosTiendaLabel.setForeground(new java.awt.Color(255, 255, 255));
        productosTiendaLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        productosTiendaLabel.setText("Productos");
        productosTiendaLabel.setMaximumSize(new java.awt.Dimension(150, 36));
        productosTiendaLabel.setMinimumSize(new java.awt.Dimension(150, 36));
        productosTiendaLabel.setPreferredSize(new java.awt.Dimension(150, 36));

        productosClienteLabel.setBackground(new java.awt.Color(248, 147, 31));
        productosClienteLabel.setFont(new java.awt.Font("sansserif", 0, 20)); // NOI18N
        productosClienteLabel.setForeground(new java.awt.Color(255, 255, 255));
        productosClienteLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        productosClienteLabel.setText("Venta:");
        productosClienteLabel.setMaximumSize(new java.awt.Dimension(150, 36));
        productosClienteLabel.setMinimumSize(new java.awt.Dimension(150, 36));
        productosClienteLabel.setPreferredSize(new java.awt.Dimension(150, 36));

        eliminarButton.setBackground(new java.awt.Color(0, 0, 0));
        eliminarButton.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        eliminarButton.setForeground(new java.awt.Color(248, 147, 31));
        eliminarButton.setText("Eliminar");
        eliminarButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(248, 103, 27), 1, true));
        eliminarButton.setFocusPainted(false);
        eliminarButton.setMaximumSize(new java.awt.Dimension(125, 32));
        eliminarButton.setMinimumSize(new java.awt.Dimension(125, 32));
        eliminarButton.setPreferredSize(new java.awt.Dimension(125, 32));
        eliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarButtonActionPerformed(evt);
            }
        });

        editarButton.setBackground(new java.awt.Color(0, 0, 0));
        editarButton.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        editarButton.setForeground(new java.awt.Color(248, 147, 31));
        editarButton.setText("Editar");
        editarButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(248, 103, 27), 1, true));
        editarButton.setFocusPainted(false);
        editarButton.setMaximumSize(new java.awt.Dimension(125, 32));
        editarButton.setMinimumSize(new java.awt.Dimension(125, 32));
        editarButton.setPreferredSize(new java.awt.Dimension(125, 32));
        editarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarButtonActionPerformed(evt);
            }
        });

        procesarButton.setBackground(new java.awt.Color(0, 0, 0));
        procesarButton.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        procesarButton.setForeground(new java.awt.Color(248, 147, 31));
        procesarButton.setText("Procesar");
        procesarButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(248, 103, 27), 1, true));
        procesarButton.setFocusPainted(false);
        procesarButton.setMaximumSize(new java.awt.Dimension(125, 32));
        procesarButton.setMinimumSize(new java.awt.Dimension(125, 32));
        procesarButton.setPreferredSize(new java.awt.Dimension(125, 32));
        procesarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                procesarButtonActionPerformed(evt);
            }
        });

        cancelarButton.setBackground(new java.awt.Color(0, 0, 0));
        cancelarButton.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        cancelarButton.setForeground(new java.awt.Color(248, 147, 31));
        cancelarButton.setText("Cancelar");
        cancelarButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(248, 103, 27), 1, true));
        cancelarButton.setFocusPainted(false);
        cancelarButton.setMaximumSize(new java.awt.Dimension(125, 32));
        cancelarButton.setMinimumSize(new java.awt.Dimension(125, 32));
        cancelarButton.setPreferredSize(new java.awt.Dimension(125, 32));
        cancelarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarButtonActionPerformed(evt);
            }
        });

        totalLabel.setBackground(new java.awt.Color(248, 147, 31));
        totalLabel.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        totalLabel.setForeground(new java.awt.Color(0, 0, 0));
        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalLabel.setText("Total: Q. ");
        totalLabel.setMaximumSize(new java.awt.Dimension(225, 32));
        totalLabel.setMinimumSize(new java.awt.Dimension(225, 32));
        totalLabel.setPreferredSize(new java.awt.Dimension(225, 32));
        totalLabel.setRequestFocusEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(descriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(productosClienteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(productosTiendaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(carritoButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cantidadLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cantidadText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(eliminarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(procesarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(42, 42, 42))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cantidadText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cantidadLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(carritoButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productosTiendaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productosClienteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eliminarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(procesarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo para agregar imagenes e inicializar las variables a utilizar
     */
    private void setComponents() {
        ImageIcon imgCarrito = new ImageIcon(getClass().getResource("/images/carrito.png"));
        carritoButton.setIcon(new ImageIcon(imgCarrito.getImage().getScaledInstance(carritoButton.getPreferredSize().width, carritoButton.getPreferredSize().height, Image.SCALE_SMOOTH)));
        productosCliente = new ArrayList<>();
    }
    
    /**
     * Metodo para agregar verificar existencias antes de agregar productos al carrito del cliente
     * @param evt 
     */
    private void carritoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carritoButtonActionPerformed
        // TODO add your handling code here:
        int row = productosTable.getSelectedRow();
        if(row != -1){
            String cantidad = cantidadText.getText();
            if(!cantidad.isEmpty()) {
                int count = 0;
                try {
                    count = Integer.parseInt(cantidad);
                    if(count > 0 && count <= productos.get(row).getStock()) {
                        agregarProductoCliente(productos.get(row), count);
                    } else {
                        if(count == 0) {
                            control.crearAlerta("Advertencia", "El valor ingresado no es valido", null);
                        }else {
                            control.crearAlerta("Advertencia", "No hay articulos suficientes para la venta", null);
                        }
                    }
                } catch (NumberFormatException e) {
                    control.crearAlerta("Error", "El valor ingresado no es valido", null);
                    cantidadText.setText("1");
                }
            } else {
                control.crearAlerta("Error", "Ingrese la cantidad de articulos que desse", null);
                //System.out.println("Ingrese la cantidad de articulos que desee");
            }
        } else {
            control.crearAlerta("Error", "Debe seleccionar algun producto para poder agregarlo al carrito", null);
            //System.out.println("Debe seleccionar algun producto para poder agregarlo al carrito");
        }
    }//GEN-LAST:event_carritoButtonActionPerformed

    /**
     * Metodo para agregar productos al carrito del cliente
     * @param producto
     * @param count 
     */
    private void agregarProductoCliente(Producto producto, int count) {
                
        if(!productosCliente.contains(producto)) {
            //Cambiar stock en listado productos
            producto.setStock(producto.getStock() - count);
            
            //Informacion sobre el producto
            Producto tmp = new Producto(this.tienda.getCodigo(), producto.getCodigoProductos(), count);
            tmp.setNombre(producto.getNombre());
            tmp.setFabricante(producto.getFabricante());
            tmp.setGarantia(producto.getGarantia());
            tmp.setPrecio(producto.getPrecio());
            tmp.setTiendasProductosId(producto.getTiendasProductosId());
            System.out.println("idTiendasProductos: " + tmp.getTiendasProductosId());

            //Establecer subtotal
            tmp.setSubTotal(tmp.getPrecio() * tmp.getStock());
            
            //Agregar al carrito
            productosCliente.add(tmp);
            
            //Actualizar tablas
            setTableProductos();
            setTableCliente();
        } else {
            control.crearAlerta("Informacion", "El producto " + producto.getCodigoProductos() + "ya ha sido agregado", null);
        }
    }
    
    /**
     * Metodo para actualizar la tabla que muestra el carrito del cliente
     */
    private void setTableCliente() {
        total = 0;
        listaCliente = new String[productosCliente.size()][6];
        
        for (int i = 0; i < productosCliente.size(); i++) {
            listaCliente[i][0] = productosCliente.get(i).getCodigoProductos();
            listaCliente[i][1] = productosCliente.get(i).getNombre();
            listaCliente[i][2] = productosCliente.get(i).getFabricante();
            listaCliente[i][3] = productosCliente.get(i).getStock()+ "";
            
            //Aproximar a dos decimales
            double subTotal = obtenerDouble(productosCliente.get(i).getPrecio());
            productosCliente.get(i).setPrecio(subTotal);
            
            listaCliente[i][4] = "Q. " + productosCliente.get(i).getPrecio() + "";
            listaCliente[i][5] = "Q." + productosCliente.get(i).getSubTotal();
            total += productosCliente.get(i).getSubTotal();
        }
        total = obtenerDouble(total);
        totalLabel.setText("Total: Q. " + total);
        
        productosClienteTable.setModel(new javax.swing.table.DefaultTableModel(
            listaCliente,
            new String [] {
                "Codigo", "Nombre", "Fabricante", "Cantidad", "Precio", "SubTotal"
            }
        ));
    }
    
    private double obtenerDouble(Double subTotal) {
        return Math.round(subTotal*100)/100D;
    }
    
    /**
     * Evento al hacer click sobre la tabla de productos
     * Muestra la descripcion del producto seleccionado y agrega por defecto 1 a la casilla cantidad para la compra
     * siempre y cuando el stock sea suficiente
     * 
     * @param evt 
     */
    private void productosTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productosTableMouseClicked
        // TODO add your handling code here:
        int row = productosTable.getSelectedRow();
        
        if(row != -1) {
            descriptionLabel.setText(productos.get(row).getDescripcion());
            if(productos.get(row).getStock() > 0) {
                cantidadText.setText("1");
                cantidadText.setEditable(true);
            } else {
                cantidadText.setText("0");
                cantidadText.setEditable(false);
            }
        }
    }//GEN-LAST:event_productosTableMouseClicked

    /**
     * Metodo para eliminar algun producto que se iba a comprar
     * @param evt 
     */
    private void eliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarButtonActionPerformed
        // TODO add your handling code here:
        int row = productosClienteTable.getSelectedRow();
        if(row != -1) {
            int stock = productosCliente.get(row).getStock();
            int index = productos.indexOf(productosCliente.get(row));
            
            //Aumentar stock
            productos.get(index).setStock(productos.get(index).getStock()+ stock);
            
            //Eliminar de listado ProductosCliente
            productosCliente.remove(row);
            
            //Actualizar tablas
            setTableProductos();
            setTableCliente();
        }else {
            control.crearAlerta("Error", "Debe seleccionar un producto para poder eliminarlo", null);
        }
    }//GEN-LAST:event_eliminarButtonActionPerformed

    /**
     * Metodo para editar la cantidad de productos que el cliente desea comprar
     * @param evt 
     */
    private void editarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarButtonActionPerformed
        // TODO add your handling code here:
        int row = productosClienteTable.getSelectedRow();
        if(row != -1) {
            System.out.println("Stock: " + productosCliente.get(row).getStock());
            String opcion = JOptionPane.showInputDialog(this, "Cantidad", "Editar", JOptionPane.QUESTION_MESSAGE);
            int count = -1;
            try {
                count = Integer.parseInt(opcion);
            } catch(NumberFormatException ex) {
                control.crearAlerta("Error", "El valor ingresado no es valido", null);
            }
            if(count >= 0) {
                int index = productos.indexOf(productosCliente.get(row));
                if(productos.get(index).getStock() +  productosCliente.get(row).getStock() >= count) {
                    int newStock = productos.get(index).getStock() +  productosCliente.get(row).getStock() - count;
                    //Actualizar stock
                    productos.get(index).setStock(newStock);
                    productosCliente.get(row).setStock(count);

                    //Actualizar subTotal
                    double subTotal = productosCliente.get(row).getPrecio() * count;
                    productosCliente.get(row).setSubTotal(subTotal);
                    
                    if(count == 0) {
                        productosCliente.remove(row);
                    }
                    
                    //Actualizar tablas
                    setTableCliente();
                    setTableProductos();
                    
                } else {
                    control.crearAlerta("Error", "No hay suficientes productos para procesasr", null);
                    //JOptionPane.showMessageDialog(this, "No hay suficientes productos para procesar", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                control.crearAlerta("Error", "El valor ingresado no es valido", null);
                //JOptionPane.showMessageDialog(this, "El valor ingresado no es valido", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            control.crearAlerta("Alerta", "Debe seleccionar un producto para poder editar", null);
            //System.out.println("Debe seleccionar un producto para poder editar");
        }
    }//GEN-LAST:event_editarButtonActionPerformed

    private void procesarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_procesarButtonActionPerformed
        // TODO add your handling code here:
        if(!productosCliente.isEmpty()) {
            control.modalOperacionesCliente();
        }else {
            control.crearAlerta("Informacion", "Debe agregar productos al carrito para procesar la venta", null);
            //System.out.println("Debe agregar productos para poder procesar la venta");
        }
    }//GEN-LAST:event_procesarButtonActionPerformed

    /**
     * Metodo para cancelar la compra, obtiene informacion actualizada de la base de datos y
     * actualiza las tablas productos y productos del cliente.
     * @param evt 
     */
    private void cancelarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarButtonActionPerformed
        // TODO add your handling code here:
        //Actualizar informacion de productos
        obtenerProductos();
        productosCliente.clear();
        
        //Actualizar tablas
        setTableCliente();
        setTableProductos();
    }//GEN-LAST:event_cancelarButtonActionPerformed

    /**
     * Metodo para inicializar componentes necesarios para mostrar informacion de la tienda
     * @param control
     * @param tienda 
     */
    public void initializeComponents(MainControl control, Tienda tienda) {
        this.control = control;
        this.tienda = tienda;

        obtenerProductos();
        setTableProductos();
    }
    
    /**
     * Metodo para obtener productos de la base de datos
     */
    private void obtenerProductos() {
        productos = this.control.getProductosTienda(tienda.getCodigo());
    }
    
    /**
     * Metodo para agregar los productos de la tienda traidos de la base de datos a la tabla
     */
    private void setTableProductos() {
        lista = new String[productos.size()][6];
        for (int i = 0; i < productos.size(); i++) {
            lista[i][0] = productos.get(i).getCodigoProductos();
            lista[i][1] = productos.get(i).getNombre();
            lista[i][2] = productos.get(i).getFabricante();
            lista[i][3] = "Q. " + productos.get(i).getPrecio() + "";
            lista[i][4] = productos.get(i).getGarantia()+ "";
            lista[i][5] = productos.get(i).getStock()+ "";
        }
        
        productosTable.setModel(new javax.swing.table.DefaultTableModel(
            lista,
            new String [] {
                "Codigo", "Nombre", "Fabricante", "Precio", "Garantia", "Existencias"
            }
        ));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelarButton;
    private javax.swing.JLabel cantidadLabel;
    private javax.swing.JTextField cantidadText;
    private javax.swing.JButton carritoButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JButton editarButton;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton procesarButton;
    private javax.swing.JLabel productosClienteLabel;
    private javax.swing.JTable productosClienteTable;
    private javax.swing.JTable productosTable;
    private javax.swing.JLabel productosTiendaLabel;
    private javax.swing.JLabel totalLabel;
    // End of variables declaration//GEN-END:variables
}
